{"test\\spec\\var\\very-is-much":{"name":"test\\spec\\var\\very-is-much","source":"very funky is much a\n    shh 1\nwow","expected":"var funky = function(a) {\n    // 1\n}","actual":"var funky = function(a) {\n    // 1\n}","passed":true},"test\\spec\\var\\very-is":{"name":"test\\spec\\var\\very-is","source":"very foo is bar","expected":"var foo = bar;","actual":"var foo = bar;","passed":true},"test\\spec\\var\\very-init":{"name":"test\\spec\\var\\very-init","source":"very foo is bar()","expected":"var foo = bar();","actual":"var foo = bar();","passed":true},"test\\spec\\var\\very":{"name":"test\\spec\\var\\very","source":"very foo","expected":"var foo = undefined;","actual":"var foo = undefined;","passed":true},"test\\spec\\var\\is":{"name":"test\\spec\\var\\is","source":"foo is bar","expected":"foo = bar","actual":"foo = bar","passed":true},"test\\spec\\var\\assign":{"name":"test\\spec\\var\\assign","source":"foo = bar","expected":"foo = bar","actual":"foo = bar","passed":true},"test\\spec\\such\\such-args":{"name":"test\\spec\\such\\such-args","source":"such foo much bar baz\n    shh 1\nwow","expected":"function foo(bar, baz) {\n    // 1\n}","actual":"function foo(bar, baz) {\n    // 1\n}","passed":true},"test\\spec\\such\\such-arg":{"name":"test\\spec\\such\\such-arg","source":"such foo much bar\n    shh 1\nwow","expected":"function foo(bar) {\n    // 1\n}","actual":"function foo(bar) {\n    // 1\n}","passed":true},"test\\spec\\such\\such":{"name":"test\\spec\\such\\such","source":"such foo\n    shh 1\nwow","expected":"function foo() {\n    // 1\n}","actual":"function foo() {\n    // 1\n}","passed":true},"test\\spec\\statements\\trained":{"name":"test\\spec\\statements\\trained","source":"trained","expected":"\"use strict\";","actual":"\"use strict\";","passed":true},"test\\spec\\statements\\dose":{"name":"test\\spec\\statements\\dose","source":"console dose loge with 'foo'","expected":"console.log('foo');","actual":"console.log('foo');","passed":true},"test\\spec\\statements\\debooger":{"name":"test\\spec\\statements\\debooger","source":"debooger","expected":"debugger;","actual":"debugger;","passed":true},"test\\spec\\so\\so-relatve":{"name":"test\\spec\\so\\so-relatve","source":"so ./bar/foo","expected":"var foo = require('./bar/foo');","actual":"var foo = require('./bar/foo');","passed":true},"test\\spec\\so\\so-djs":{"name":"test\\spec\\so\\so-djs","source":"so ./bar/foo.djs","expected":"var foo = require('./bar/foo.djs');","actual":"var foo = require('./bar/foo.djs');","passed":true},"test\\spec\\so\\so-dash":{"name":"test\\spec\\so\\so-dash","source":"so foo-bar","expected":"var foo_bar = require('foo-bar');","actual":"var foo_bar = require('foo-bar');","passed":true},"test\\spec\\so\\so-as":{"name":"test\\spec\\so\\so-as","source":"so foo as bar","expected":"var bar = require('foo');","actual":"var bar = require('foo');","passed":true},"test\\spec\\so\\so":{"name":"test\\spec\\so\\so","source":"so foo","expected":"var foo = require('foo');","actual":"var foo = require('foo');","passed":true},"test\\spec\\shh\\shh-single":{"name":"test\\spec\\shh\\shh-single","source":"shh silent","expected":"// silent","actual":"// silent","passed":true},"test\\spec\\shh\\shh-multi":{"name":"test\\spec\\shh\\shh-multi","source":"quiet\n    silent\n    ninja\nloud","expected":"/*\n    silent\n    ninja\n*/","actual":"/*\n    silent\n    ninja\n*/","passed":true},"test\\spec\\rly\\rly-but-rly-but":{"name":"test\\spec\\rly\\rly-but-rly-but","source":"rly foo\n    shh 1\nbut rly bar\n    shh 2\nbut\n    shh 3\nwow","expected":"if (foo) {\n    // 1\n} else if (bar) {\n    // 2\n} else {\n    // 3\n}","actual":"if (foo) {\n    // 1\n} else if (bar) {\n    // 2\n} else {\n    // 3\n}","passed":true},"test\\spec\\rly\\rly-but-rly":{"name":"test\\spec\\rly\\rly-but-rly","source":"rly foo\n    shh 1\nbut rly bars\n    shh 2\nwow","expected":"if (foo) {\n    // 1\n} else if (bars) {\n    // 2\n}","actual":"if (foo) {\n    // 1\n} else if (bars) {\n    // 2\n}","passed":true},"test\\spec\\rly\\rly-but-notrly":{"name":"test\\spec\\rly\\rly-but-notrly","source":"rly foo\n    shh 1\nbut notrly bar\n    shh 2\nwow","expected":"if (foo) {\n    // 1\n} else if (!bar) {\n    // 2\n}","actual":"if (foo) {\n    // 1\n} else if (!bar) {\n    // 2\n}","passed":true},"test\\spec\\rly\\rly-but":{"name":"test\\spec\\rly\\rly-but","source":"rly foo\n    shh 1\nbut\n    shh 2\nwow","expected":"if (foo) {\n    // 1\n} else {\n    // 2\n}","actual":"if (foo) {\n    // 1\n} else {\n    // 2\n}","passed":true},"test\\spec\\rly\\rly":{"name":"test\\spec\\rly\\rly","source":"rly foo\n    shh 1\nwow","expected":"if (foo) {\n    // 1\n}","actual":"if (foo) {\n    // 1\n}","passed":true},"test\\spec\\plz\\plz-with-much":{"name":"test\\spec\\plz\\plz-with-much","source":"plz foo with bar much err\n    shh 1\nwow&","expected":"foo(bar, function(err) {\n    // 1\n})","actual":"foo(bar, function(err) {\n    // 1\n})","passed":true},"test\\spec\\plz\\plz-with":{"name":"test\\spec\\plz\\plz-with","source":"plz foo with bar","expected":"foo(bar);","actual":"foo(bar);","passed":true},"test\\spec\\plz\\plz-chain":{"name":"test\\spec\\plz\\plz-chain","source":"plz foo with bar&\ndose baz with buzz","expected":"foo(bar)\n    .baz(buzz);","actual":"foo(bar)\n    .baz(buzz);","passed":true},"test\\spec\\plz\\plz":{"name":"test\\spec\\plz\\plz","source":"plz foo","expected":"foo();","actual":"foo();","passed":true},"test\\spec\\operators\\smallerish":{"name":"test\\spec\\operators\\smallerish","source":"many foo smallerish bar\n    shh 1\nwow","expected":"while (foo <= bar) {\n    // 1\n}","actual":"while (foo <= bar) {\n    // 1\n}","passed":true},"test\\spec\\operators\\smaller":{"name":"test\\spec\\operators\\smaller","source":"many foo smaller bar\n    shh 1\nwow","expected":"while (foo < bar) {\n    // 1\n}","actual":"while (foo < bar) {\n    // 1\n}","passed":true},"test\\spec\\operators\\or":{"name":"test\\spec\\operators\\or","source":"rly foo or bar\n    shh 1\nwow","expected":"if (foo || bar) {\n    // 1\n}","actual":"if (foo || bar) {\n    // 1\n}","passed":true},"test\\spec\\operators\\not":{"name":"test\\spec\\operators\\not","source":"rly foo is bar\n    shh 1\nwow","expected":"if (foo === bar) {\n    // 1\n}","actual":"if (foo === bar) {\n    // 1\n}","passed":true},"test\\spec\\operators\\more":{"name":"test\\spec\\operators\\more","source":"many foo more bar\n    shh 1\nwow","expected":"while (foo += bar) {\n    // 1\n}","actual":"while (foo += bar) {\n    // 1\n}","passed":true},"test\\spec\\operators\\maybe":{"name":"test\\spec\\operators\\maybe","source":"many maybe\n    shh 1\nwow","expected":"while (foo -= bar) {\n    // 1\n}","actual":"while (maybe) {\n    // 1\n}","passed":false},"test\\spec\\operators\\lots":{"name":"test\\spec\\operators\\lots","source":"many foo lots bar\n    shh 1\nwow","expected":"while (foo *= bar) {\n    // 1\n}","actual":"while (foo *= bar) {\n    // 1\n}","passed":true},"test\\spec\\operators\\less":{"name":"test\\spec\\operators\\less","source":"many foo less bar\n    shh 1\nwow","expected":"while (foo -= bar) {\n    // 1\n}","actual":"while (foo -= bar) {\n    // 1\n}","passed":true},"test\\spec\\operators\\is":{"name":"test\\spec\\operators\\is","source":"rly foo is bar\n    shh 1\nwow","expected":"if (foo === bar) {\n    // 1\n}","actual":"if (foo === bar) {\n    // 1\n}","passed":true},"test\\spec\\operators\\few":{"name":"test\\spec\\operators\\few","source":"many foo few bar\n    shh 1\nwow","expected":"while (foo /= bar) {\n    // 1\n}","actual":"while (foo /= bar) {\n    // 1\n}","passed":true},"test\\spec\\operators\\biggerish":{"name":"test\\spec\\operators\\biggerish","source":"many foo biggerish bar\n    shh 1\nwow","expected":"while (foo >= bar) {\n    // 1\n}","actual":"while (foo >= bar) {\n    // 1\n}","passed":true},"test\\spec\\operators\\bigger":{"name":"test\\spec\\operators\\bigger","source":"many foo bigger bar\n    shh 1\nwow","expected":"while (foo > bar) {\n    // 1\n}","actual":"while (foo > bar) {\n    // 1\n}","passed":true},"test\\spec\\operators\\assignment\\more\\variable":{"name":"test\\spec\\operators\\assignment\\more\\variable","source":"foo more bar","expected":"foo += bar","actual":"foo += bar","passed":true},"test\\spec\\operators\\assignment\\more\\string":{"name":"test\\spec\\operators\\assignment\\more\\string","source":"greeting more 'world'","expected":"greeting += 'world'","actual":"greeting += 'world'","passed":true},"test\\spec\\operators\\assignment\\more\\object":{"name":"test\\spec\\operators\\assignment\\more\\object","source":"something more new Number with 5","expected":"something += new Number(5);","actual":"something += new Number(5);","passed":true},"test\\spec\\operators\\assignment\\more\\number":{"name":"test\\spec\\operators\\assignment\\more\\number","source":"foo more 5","expected":"foo += 5","actual":"foo += 5","passed":true},"test\\spec\\operators\\assignment\\lots\\variable":{"name":"test\\spec\\operators\\assignment\\lots\\variable","source":"foo lots bar","expected":"foo *= bar","actual":"foo *= bar","passed":true},"test\\spec\\operators\\assignment\\lots\\object":{"name":"test\\spec\\operators\\assignment\\lots\\object","source":"something lots new Number with 5","expected":"something *= new Number(5);","actual":"something *= new Number(5);","passed":true},"test\\spec\\operators\\assignment\\lots\\number":{"name":"test\\spec\\operators\\assignment\\lots\\number","source":"foo lots 10","expected":"foo *= 10","actual":"foo *= 10","passed":true},"test\\spec\\operators\\assignment\\less\\variable":{"name":"test\\spec\\operators\\assignment\\less\\variable","source":"foo less bar","expected":"foo -= bar","actual":"foo -= bar","passed":true},"test\\spec\\operators\\assignment\\less\\object":{"name":"test\\spec\\operators\\assignment\\less\\object","source":"something less new Number with 5","expected":"something -= new Number(5);","actual":"something -= new Number(5);","passed":true},"test\\spec\\operators\\assignment\\less\\number":{"name":"test\\spec\\operators\\assignment\\less\\number","source":"foo less 1","expected":"foo -= 1","actual":"foo -= 1","passed":true},"test\\spec\\operators\\assignment\\is\\variable":{"name":"test\\spec\\operators\\assignment\\is\\variable","source":"bar is foo","expected":"bar = foo","actual":"bar = foo","passed":true},"test\\spec\\operators\\assignment\\is\\string":{"name":"test\\spec\\operators\\assignment\\is\\string","source":"foo is 'hello'","expected":"foo = 'hello'","actual":"foo = 'hello'","passed":true},"test\\spec\\operators\\assignment\\is\\object":{"name":"test\\spec\\operators\\assignment\\is\\object","source":"foo is new Bar","expected":"foo = new Bar();","actual":"foo = new Bar();","passed":true},"test\\spec\\operators\\assignment\\is\\number":{"name":"test\\spec\\operators\\assignment\\is\\number","source":"foo is 5","expected":"foo = 5","actual":"foo = 5","passed":true},"test\\spec\\operators\\assignment\\few\\variable":{"name":"test\\spec\\operators\\assignment\\few\\variable","source":"foo few bar","expected":"foo /= bar","actual":"foo /= bar","passed":true},"test\\spec\\operators\\assignment\\few\\object":{"name":"test\\spec\\operators\\assignment\\few\\object","source":"something few new Number with 5","expected":"something /= new Number(5);","actual":"something /= new Number(5);","passed":true},"test\\spec\\operators\\assignment\\few\\number":{"name":"test\\spec\\operators\\assignment\\few\\number","source":"foo few 2","expected":"foo /= 2","actual":"foo /= 2","passed":true},"test\\spec\\operators\\as":{"name":"test\\spec\\operators\\as","source":"many foo as bar()\n    shh 1\nwow","expected":"while (foo = bar()) {\n    // 1\n}","actual":"while (foo = bar()) {\n    // 1\n}","passed":true},"test\\spec\\operators\\and":{"name":"test\\spec\\operators\\and","source":"rly foo and bar\n    shh 1\nwow","expected":"if (foo && bar) {\n    // 1\n}","actual":"if (foo && bar) {\n    // 1\n}","passed":true},"test\\spec\\objects\\windoge":{"name":"test\\spec\\objects\\windoge","source":"windoge.location;","expected":"window.location;","actual":"window.location;","passed":true},"test\\spec\\objects\\dogument":{"name":"test\\spec\\objects\\dogument","source":"plz dogeument.write","expected":"document.write();","actual":"document.write();","passed":true},"test\\spec\\objects\\console.loge":{"name":"test\\spec\\objects\\console.loge","source":"plz console.loge","expected":"console.log();","actual":"console.log();","passed":true},"test\\spec\\notrly\\notrly-but-rly":{"name":"test\\spec\\notrly\\notrly-but-rly","source":"notrly foo\n    shh 1\nbut rly bar\n    shh 2\nwow","expected":"if (!foo) {\n    // 1\n} else if (bar) {\n    // 2\n}","actual":"if (!foo) {\n    // 1\n} else if (bar) {\n    // 2\n}","passed":true},"test\\spec\\notrly\\notrly-but-notrly-but":{"name":"test\\spec\\notrly\\notrly-but-notrly-but","source":"notrly foo\n    shh 1\nbut notrly bar\n    shh 2\nbut\n    shh 3\nwow","expected":"if (!foo) {\n    // 1\n} else if (!bar) {\n    // 2\n} else {\n    // 3\n}","actual":"if (!foo) {\n    // 1\n} else if (!bar) {\n    // 2\n} else {\n    // 3\n}","passed":true},"test\\spec\\notrly\\notrly-but-notrly":{"name":"test\\spec\\notrly\\notrly-but-notrly","source":"notrly foo\n    shh 1\nbut notrly bar\n    shh 2\nwow","expected":"if (!foo) {\n    // 1\n} else if (!bar) {\n    // 2\n}","actual":"if (!foo) {\n    // 1\n} else if (!bar) {\n    // 2\n}","passed":true},"test\\spec\\notrly\\notrly-but":{"name":"test\\spec\\notrly\\notrly-but","source":"notrly foo\n    shh 1\nbut\n    shh 2\nwow","expected":"if (!foo) {\n    // 1\n} else {\n    // 2\n}","actual":"if (!foo) {\n    // 1\n} else {\n    // 2\n}","passed":true},"test\\spec\\notrly\\notrly":{"name":"test\\spec\\notrly\\notrly","source":"notrly foo\n    shh 1\nwow","expected":"if (!foo) {\n    // 1\n}","actual":"if (!foo) {\n    // 1\n}","passed":true},"test\\spec\\loops\\much":{"name":"test\\spec\\loops\\much","source":"much very i as 1 next i smaller 10 next i more 1\n    shh 1\nwow","expected":"for (var i = 1; i < 10; i += 1) {\n    // 1\n}","actual":"for (var i = 1; i < 10; i += 1) {\n    // 1\n}","passed":true},"test\\spec\\loops\\many":{"name":"test\\spec\\loops\\many","source":"many foo\n    shh 1\nwow","expected":"while (foo) {\n    // 1\n}","actual":"while (foo) {\n    // 1\n}","passed":true},"test\\spec\\empty":{"name":"test\\spec\\empty","source":"","expected":"","actual":"","passed":true},"test\\spec\\dose\\with-much-chained":{"name":"test\\spec\\dose\\with-much-chained","source":"Math dose fib with much a\n    shh 1\nwow& \ndose map with 10","expected":"Math.fib(function(a) {\n        // 1\n    })\n    .map(10);","actual":"Math.fib(function(a) {\n        // 1\n    })\n    .map(10);","passed":true},"test\\spec\\dose\\with-much":{"name":"test\\spec\\dose\\with-much","source":"Math dose fib with much a\n    shh 1\nwow&","expected":"Math.fib(function(a) {\n    // 1\n})","actual":"Math.fib(function(a) {\n    // 1\n})","passed":true},"test\\spec\\dose\\with":{"name":"test\\spec\\dose\\with","source":"Math dose fib with 5","expected":"Math.fib(5);","actual":"Math.fib(5);","passed":true},"test\\spec\\dose\\no-args":{"name":"test\\spec\\dose\\no-args","source":"Math dose fib","expected":"Math.fib();","actual":"Math.fib();","passed":true},"test\\spec\\complex\\http-server":{"name":"test\\spec\\complex\\http-server","source":"shh Example of a HTTP Server\nso http\n\nhttp dose createServer with much req res\n   req dose writeHead with 200 {'Content-Type': 'text/plain'}\n\n   req dose end with 'so hello\\nmuch world'\nwow&\n.plz listen with 8080","expected":"// Example of a HTTP Server\nvar http = require('http');\n\nhttp.createServer(function(req, res) {\n        req.writeHead(200, {\n            'Content-Type': 'text/plain'\n        });\n\n        req.end('so hello\\nmuch world');\n    })\n    .listen(8080);","actual":"// Example of a HTTP Server\nvar http = require('http');\n\nhttp.createServer(function(req, res) {\n        req.writeHead(200, {\n            'Content-Type': 'text/plain'\n        });\n\n        req.end('so hello\\nmuch world');\n    })\n    .listen(8080);","passed":true}}